{"version":3,"file":"column.js","sourceRoot":"","sources":["../../../src/controllers/column.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport { AppError, HttpCode } from '../utils/AppError'\nimport Column from '../models/Column'\nimport Board from '../models/Board'\n\nexport const createColumn = async (req: Request, res: Response, next: NextFunction) => {\n   const { name, boardID } = req.body\n\n   const newColumn = new Column({ name, boardID })\n\n   try {\n      await newColumn.save()\n      await Board.findOneAndUpdate(\n         { boardID: newColumn.boardID },\n         { $push: { columns: newColumn } },\n         { new: true, runValidators: true }\n      )\n      res.status(201).json(newColumn)\n   } catch (error) {\n      next(error)\n   }\n}\n\nexport const updateColumn = async (req: Request, res: Response, next: NextFunction) => {\n   const updates = Object.keys(req.body)\n   const allowUpdates = ['name']\n   const isValidoperation = updates.every((update) => allowUpdates.includes(update))\n\n   try {\n      if (!isValidoperation) {\n         throw new AppError({\n            httpCode: HttpCode.BAD_REQUEST,\n            description: 'Invalid value field updates!',\n         })\n      }\n\n      const column = await Column.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })\n\n      if (!column) {\n         throw new AppError({\n            httpCode: HttpCode.NOT_FOUND,\n            description: 'Column is not found!',\n         })\n      }\n\n      res.status(201).json(column)\n   } catch (error) {\n      next(error)\n   }\n}\n\nexport const deleteColumn = async (req: Request, res: Response, next: NextFunction) => {\n   try {\n      const column = await Column.findOne({ _id: req.params.id })\n\n      if (!column) {\n         throw new AppError({\n            httpCode: HttpCode.NOT_FOUND,\n            description: 'Column is not found',\n         })\n      }\n\n      await column.deleteOne()\n\n      res.status(200).json(column)\n   } catch (error) {\n      next(error)\n   }\n}\n"]}