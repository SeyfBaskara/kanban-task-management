{"version":3,"file":"board.js","sourceRoot":"","sources":["../../../src/controllers/board.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport { AppError, HttpCode } from '../utils/AppError'\nimport Board from '../models/Board'\n\nexport const createBoard = async (req: Request, res: Response, next: NextFunction) => {\n   const { name, boardID } = req.body\n\n   const newBoard = new Board({ name, boardID })\n\n   try {\n      await newBoard.save()\n      res.status(201).json(newBoard)\n   } catch (error) {\n      next(error)\n   }\n}\n\nexport const getBoard = async (_req: Request, res: Response, next: NextFunction) => {\n   try {\n      const boards = await Board.find({}).populate({\n         path: 'columns',\n         model: 'Column',\n         populate: {\n            path: 'tasks',\n            model: 'Task',\n            populate: {\n               path: 'subtasks',\n               model: 'SubTask',\n            },\n         },\n      })\n\n      res.status(200).json(boards)\n   } catch (error) {\n      next(error)\n   }\n}\n\nexport const updateBoard = async (req: Request, res: Response, next: NextFunction) => {\n   const updates = Object.keys(req.body)\n   const allowUpdates = ['name']\n   const isValidoperation = updates.every((update) => allowUpdates.includes(update))\n\n   try {\n      if (!isValidoperation) {\n         throw new AppError({\n            httpCode: HttpCode.BAD_REQUEST,\n            description: 'Invalid board value field updates!',\n         })\n      }\n\n      const board = await Board.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })\n\n      if (!board) {\n         throw new AppError({\n            httpCode: HttpCode.NOT_FOUND,\n            description: 'Board is not found!',\n         })\n      }\n\n      res.status(201).json(board)\n   } catch (error) {\n      next(error)\n   }\n}\n\nexport const deleteBoard = async (req: Request, res: Response, next: NextFunction) => {\n   try {\n      const board = await Board.findOne({ _id: req.params.id })\n\n      if (!board) {\n         throw new AppError({\n            httpCode: HttpCode.NOT_FOUND,\n            description: 'Board is not found',\n         })\n      }\n\n      await board.deleteOne()\n      res.status(200).json(board)\n   } catch (error) {\n      next(error)\n   }\n}\n"]}