{"version":3,"file":"ErrorHandler.js","sourceRoot":"","sources":["../../../src/middleware/ErrorHandler.ts"],"names":[],"mappings":";;;AACA,gDAAsD;AACtD,sDAAkD;AAElD,MAAM,YAAY;IACR,WAAW,CAAC,KAAuB,EAAE,QAAmB;QAC5D,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,QAAQ,EAAE;YACzC,IAAI,CAAC,kBAAkB,CAAC,KAAiB,EAAE,QAAQ,CAAC,CAAA;SACtD;aAAM;YACJ,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;SAC3C;IACJ,CAAC;IAEM,cAAc,CAAC,KAAY;QAC/B,IAAI,KAAK,YAAY,mBAAQ,EAAE;YAC5B,OAAO,KAAK,CAAC,aAAa,CAAA;SAC5B;QAED,OAAO,KAAK,CAAA;IACf,CAAC;IAEO,kBAAkB,CAAC,KAAe,EAAE,QAAkB;QAC3D,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAA;IACnE,CAAC;IAEO,mBAAmB,CAAC,KAAuB,EAAE,QAAmB;QACrE,MAAM,EAAE,IAAI,EAAE,GAAQ,KAAK,CAAA;QAE3B,IAAI,IAAI,KAAK,KAAK,EAAE;YACjB,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC,mBAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAA;SACzF;aAAM;YACJ,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC,mBAAQ,CAAC,qBAAqB,EAAE,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAA;SAC7F;QAED,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAA;QAChE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,yBAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;IAC5B,CAAC;CACH;AAEY,QAAA,YAAY,GAAG,IAAI,YAAY,EAAE,CAAA","sourcesContent":["import { Response } from 'express'\nimport { AppError, HttpCode } from '../utils/AppError'\nimport { exitHandler } from '../utils/ExitHandler'\n\nclass ErrorHandler {\n   public handleError(error: Error | AppError, response?: Response): void {\n      if (this.isTrustedError(error) && response) {\n         this.handleTrustedError(error as AppError, response)\n      } else {\n         this.handleCriticalError(error, response)\n      }\n   }\n\n   public isTrustedError(error: Error): boolean {\n      if (error instanceof AppError) {\n         return error.isOperational\n      }\n\n      return false\n   }\n\n   private handleTrustedError(error: AppError, response: Response): void {\n      response.status(error.httpCode).json({ message: error.message })\n   }\n\n   private handleCriticalError(error: Error | AppError, response?: Response): void {\n      const { code }: any = error\n\n      if (code === 11000) {\n         response?.status(HttpCode.BAD_REQUEST).json({ message: 'Duplicate filed value added' })\n      } else {\n         response?.status(HttpCode.INTERNAL_SERVER_ERROR).json({ message: 'Internal server error' })\n      }\n\n      console.log('Application encountered a critical error. Exiting')\n      console.log(error)\n      exitHandler.handleExit(1)\n   }\n}\n\nexport const errorHandler = new ErrorHandler()\n"]}